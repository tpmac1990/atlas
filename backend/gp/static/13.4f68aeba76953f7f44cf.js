(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[13],{

/***/ "./src/components/detail/edit/TitleEdit.js":
/*!*************************************************!*\
  !*** ./src/components/detail/edit/TitleEdit.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var _redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../redux */ \"./src/redux/index.js\");\n/* harmony import */ var _ItemsManyDropdownAdd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ItemsManyDropdownAdd */ \"./src/components/detail/edit/ItemsManyDropdownAdd.js\");\n/* harmony import */ var _ItemSingleDropdownChange__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ItemSingleDropdownChange */ \"./src/components/detail/edit/ItemSingleDropdownChange.js\");\n/* harmony import */ var _ItemsManyDropdownAddMulti__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ItemsManyDropdownAddMulti */ \"./src/components/detail/edit/ItemsManyDropdownAddMulti.js\");\n/* harmony import */ var _buildEditDictionary__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buildEditDictionary */ \"./src/components/detail/edit/buildEditDictionary.js\");\n/* harmony import */ var _EditTitleComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./EditTitleComponent */ \"./src/components/detail/edit/EditTitleComponent.js\");\n/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-router-dom */ \"./node_modules/react-router-dom/esm/react-router-dom.js\");\n/* harmony import */ var _editConfigs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./editConfigs */ \"./src/components/detail/edit/editConfigs.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nvar TitleEdit = function TitleEdit(_ref) {\n  var match = _ref.match;\n  var id = match.params.id;\n  var dispatch = Object(react_redux__WEBPACK_IMPORTED_MODULE_1__[\"useDispatch\"])();\n\n  var _useRouteMatch = Object(react_router_dom__WEBPACK_IMPORTED_MODULE_8__[\"useRouteMatch\"])(),\n      path = _useRouteMatch.path,\n      url = _useRouteMatch.url;\n\n  var history = Object(react_router_dom__WEBPACK_IMPORTED_MODULE_8__[\"useHistory\"])();\n\n  var _useSelector = Object(react_redux__WEBPACK_IMPORTED_MODULE_1__[\"useSelector\"])(function (state) {\n    return state.detailSelection;\n  }),\n      value = _useSelector.title; // console.log(value)\n\n\n  var _useSelector2 = Object(react_redux__WEBPACK_IMPORTED_MODULE_1__[\"useSelector\"])(function (state) {\n    return state.dataEdit;\n  }),\n      titles = _useSelector2.titles,\n      title_result = _useSelector2.title_result;\n\n  var groups = _editConfigs__WEBPACK_IMPORTED_MODULE_9__[\"title_objs\"].groups,\n      columns = _editConfigs__WEBPACK_IMPORTED_MODULE_9__[\"title_objs\"].columns,\n      multis = _editConfigs__WEBPACK_IMPORTED_MODULE_9__[\"title_objs\"].multis;\n  var typeSelect = groups.typeSelect,\n      statusSelect = groups.statusSelect,\n      geoProvinceSelect = groups.geoProvinceSelect,\n      holderSelect = groups.holderSelect,\n      oidSelect = groups.oidSelect;\n  var holderMulti = multis.holderMulti; // // configs for the infinity select box in the respective groups\n  // // name: the key for which all state is stored within for the dropdown in redux\n  // // endpoint: the api endpoint to fetch the data for the dropdown from\n  // // model: the model to get the data to populate the select box with\n  // // key: the key of the value to display. this is the pk in the database and is used to update the database\n  // // label: the values displayed in the dropdown\n  // // unique_grp: name of the multi group for which all values need to be unique. Used when unique values required across multiple groups\n  // // styles: the style to apply to the dropdown\n  // const geoProvinceSelect = {name: 'geoprovince', endpoint: 'site-group', model: 'GeologicalProvince', key: '_id', label: 'name', unique_grp: null, styles: 'infinite-select-c1'}\n  // const typeSelect = {name: 'typ', endpoint: 'site-group', model: 'TenType', key: '_id', label: 'fname', unique_grp: null, styles: 'infinite-select-c1'}\n  // // dropped this as a titles materials should be a collection of its sites\n  // // const majorMaterialSelect = {name: 'majmat', endpoint: 'site-group', model: 'Material', key: 'code', label: 'name', styles: 'infinite-select-c1'}\n  // // const minorMaterialSelect = {name: 'minmat', endpoint: 'site-group', model: 'Material', key: 'code', label: 'name', styles: 'infinite-select-c1'}\n  // const statusSelect = {name: 'status', endpoint: 'site-group', model: 'TenStatus', key: '_id', label: 'original', unique_grp: null, styles: 'infinite-select-c1'}\n  // const oidSelect = {name: 'oid', endpoint: 'site-group', model: 'TenOriginalID', key: 'code', label: 'code', unique_grp: null, styles: 'infinite-select-c1'}\n  // const holderSelect = {name: 'holder', endpoint: 'site-group', model: 'Holder', key: '_id', label: 'name', unique_grp: null, styles: 'infinite-select-c1'}\n  // configs to manage the multicolumn tables and how or if they are editable\n  // style: the bootstrap column width. they should equal to 10 with 2 left for the final 'remove' action column.\n  // header: the column header as multiple column tables have column headers\n  // edit_type: the type of edit. null = not editable, input = manual input, select = select from dropdown (requires other configs)\n  // input_type: for 'edit_type' input. this is the type of input to display such as 'text' or 'Number'\n  // model: for 'edit_type' select: the model to get the dropdown data from\n  // select_key: for 'edit_type' select: the field of the model to use as the keys in the dropdown\n  // select_label: for 'edit_type' select: the field of the model to display in the dropdown\n  // default: for 'edit_type' select: the default value to display when a new entry is added.\n  // const holderMulti = [\n  //     {\n  //         header: 'Name',\n  //         label: 'label', // the core field is always labelled 'label'\n  //         edit_type: null,\n  //         style: 'col-5'\n  //     },\n  //     {\n  //         header: 'Percentage Held',\n  //         label: 'percown',\n  //         edit_type: 'input',\n  //         input_type: 'Number', // formates the input to accept numbers only\n  //         default: 0,\n  //         style: 'col-5'\n  //     },\n  //     // {\n  //     //     header: 'Holder Position',\n  //     //     label: 'position_id',\n  //     //     edit_type: 'select',\n  //     //     default: 2,\n  //     //     model: 'HolderPosition',\n  //     //     select_key: '_id',\n  //     //     select_label: 'name',\n  //     //     style: 'col-3'\n  //     // }\n  // ]\n  // columns is used to format the data to be sent in the post request\n  // field: required when using 'ItemsManyManualAdd'. this is the model field name to be updated\n  // is_int: if the key is an integer it will use pareseInt to convert it to integer form from string\n  // is_array: if the field is an m2m then the result needs to be in array form, otherwise it should'nt\n  // multi: required for tables with multiple columns. it takes a list of the columns accept for the title id column. this is sorted in the backend\n  //  name: name of field. It should be the same as the field in the model\n  // format: the format of the value to be sent to the backend\n  // value: used to identify how to format the value in buildEditDictionary.\n  // const columns = {\n  //     // holder: { is_int: true, is_array: true, multi: [\n  //     //                                             // {name: 'tenement', format: 'string', value: 'obj_id'},\n  //     //                                             {name: 'name', format: 'integer', value: '_id'},\n  //     //                                             {name: 'percown', format: 'float', value: 'in_multi'},\n  //     //                                             {name: 'position_id', format: 'integer', value: 'in_multi'}] },\n  //     holder: { is_int: true, is_array: true, multi: [\n  //                                                     // {name: 'tenement', format: 'string', value: 'obj_id'},\n  //                                                     {name: 'name', format: 'integer', value: '_id'},\n  //                                                     {name: 'percown', format: 'float', value: 'in_multi'}] },\n  //     oid: { field: 'code', is_int: false, is_array: true },\n  //     typ: { is_int: true, is_array: false },\n  //     status: { is_int: true, is_array: false },\n  //     geoprovince: { is_int: true, is_array: true },\n  //     // majmat: { is_int: false, is_array: true },\n  //     // minmat: { is_int: false, is_array: true }\n  // }\n  // get the site data when the id changes \n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    // when directed to the page, reset the edit data state. There was edit data entered by the user that remained when id was changed which presented the incorrect data\n    // dispatch(resetEditData('titles'))\n    // get the data to display on the page\n    dispatch(Object(_redux__WEBPACK_IMPORTED_MODULE_2__[\"getTitleData\"])(id));\n  }, [id]); // format the data ready for the post api, then send post request if updates have been made.\n\n  var FormHandler = function FormHandler(e) {\n    e.preventDefault();\n    var dict = Object(_buildEditDictionary__WEBPACK_IMPORTED_MODULE_6__[\"buildEditDictionary\"])(titles, value, columns, id);\n\n    if (dict['changes']) {\n      dispatch(Object(_redux__WEBPACK_IMPORTED_MODULE_2__[\"postSiteUpdates\"])({\n        id: id,\n        dict: dict,\n        endpoint: 'title'\n      }));\n    } else {\n      window.scrollTo(0, 0);\n      dispatch(Object(_redux__WEBPACK_IMPORTED_MODULE_2__[\"setPopupMessage\"])({\n        message: 'No Changes Were Made',\n        type: 'warning',\n        style: 'warning-edit'\n      }));\n    }\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    var success = title_result.success,\n        msg = title_result.msg;\n\n    if (success) {\n      history.push(url.replace('edit/', ''));\n      dispatch(Object(_redux__WEBPACK_IMPORTED_MODULE_2__[\"resetApiOutcome\"])('title_result'));\n      window.scrollTo(0, 0);\n      dispatch(Object(_redux__WEBPACK_IMPORTED_MODULE_2__[\"setPopupMessage\"])({\n        message: \"Site \".concat(msg, \" Updated Successfully\"),\n        type: 'success',\n        style: 'success-edit'\n      }));\n    }\n  }, [title_result]);\n\n  if (value === null) {\n    return null;\n  } else {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n      className: \"edit-page\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_EditTitleComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n      title: value.ind,\n      index: value.ind\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"form\", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_ItemSingleDropdownChange__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n      header: \"Title Type\",\n      datagroup: \"titles\",\n      values: value.typ,\n      dropdown_dict: typeSelect\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_ItemSingleDropdownChange__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n      header: \"Title Status\",\n      datagroup: \"titles\",\n      values: value.status,\n      dropdown_dict: statusSelect\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_ItemsManyDropdownAdd__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n      header: \"Geological Provinces\",\n      datagroup: \"titles\",\n      values: value.geoprovince,\n      has_input: false,\n      dropdown_dict: geoProvinceSelect\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_ItemsManyDropdownAddMulti__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n      header: \"Holders\",\n      datagroup: \"titles\",\n      values: value.holder,\n      has_input: false,\n      columns: holderMulti,\n      dropdown_dict: holderSelect\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_ItemsManyDropdownAdd__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n      header: \"Title Related ID's\",\n      datagroup: \"titles\",\n      values: value.oid,\n      has_input: true,\n      dropdown_dict: oidSelect\n    }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn-c5 edit-submit-btn\",\n      onClick: FormHandler\n    }, \"Submit\")));\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (TitleEdit);\n\n//# sourceURL=webpack:///./src/components/detail/edit/TitleEdit.js?");

/***/ })

}]);